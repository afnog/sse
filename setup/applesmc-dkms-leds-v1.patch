diff --git a/usr/src/dkms_source_tree/applesmc.c b/usr/src/dkms_source_tree/applesmc.c
index 2827088..b786a66 100644
--- a/usr/src/dkms_source_tree/applesmc.c
+++ b/usr/src/dkms_source_tree/applesmc.c
@@ -35,6 +35,7 @@
 #include <linux/kernel.h>
 #include <linux/slab.h>
 #include <linux/module.h>
+#include <linux/moduleparam.h>
 #include <linux/timer.h>
 #include <linux/dmi.h>
 #include <linux/mutex.h>
@@ -67,6 +68,9 @@
 
 #define LIGHT_SENSOR_LEFT_KEY	"ALV0" /* r-o {alv (6-10 bytes) */
 #define LIGHT_SENSOR_RIGHT_KEY	"ALV1" /* r-o {alv (6-10 bytes) */
+#define SIL_BRIGHTNESS_KEY	"LSLN" /* r/w {pwm (2 bytes) */
+#define SIL_SET_KEY		"LSSB" /* w-o {lso (2 bytes) */
+#define SIL_REVERT_KEY		"LSRB" /* w-o flag (1 byte) */
 #define BACKLIGHT_KEY		"LKSB" /* w-o {lkb (2 bytes) */
 
 #define CLAMSHELL_KEY		"MSLD" /* r-o ui8 (unused) */
@@ -137,6 +141,8 @@ static struct applesmc_registers {
 	int num_light_sensors;		/* number of light sensors */
 	bool has_accelerometer;		/* has motion sensor */
 	bool has_key_backlight;		/* has keyboard backlight */
+	bool has_sleep_led;		/* has Sleep Indicator Light (SIL) */
+	u8 sleep_led_saved_brightness[2]; /* brightness when module loaded */
 	bool init_complete;		/* true when fully initialized */
 	struct applesmc_entry *cache;	/* cached key entries */
 	const char **index;		/* temperature key index */
@@ -144,11 +150,17 @@ static struct applesmc_registers {
 	.mutex = __MUTEX_INITIALIZER(smcreg.mutex),
 };
 
-static const int debug;
+static bool debug = false;
+module_param(debug, bool, 0644);
+
+static bool smooth_led = false;
+module_param(smooth_led, bool, 0644);
+
 static struct platform_device *pdev;
 static s16 rest_x;
 static s16 rest_y;
 static u8 backlight_state[2];
+static u8 sleep_led_state[4]; // 2 bytes LmsOverrideBehavior, 2 bytes brightness big-endian
 
 static struct device *hwmon_dev;
 static struct input_polled_dev *applesmc_idev;
@@ -159,7 +171,8 @@ static struct input_polled_dev *applesmc_idev;
  */
 static unsigned int key_at_index;
 
-static struct workqueue_struct *applesmc_led_wq;
+static struct workqueue_struct *applesmc_backlight_wq;
+static struct workqueue_struct *applesmc_sleep_led_wq;
 
 /*
  * wait_read - Wait for a byte to appear on SMC port. Callers must
@@ -569,14 +582,28 @@ static int applesmc_init_smcreg_try(void)
 	if (ret)
 		return ret;
 
+	ret = applesmc_has_key(SIL_SET_KEY, &s->has_sleep_led);
+	if (ret)
+		return ret;
+
+	if (s->has_sleep_led)
+	{
+		ret = applesmc_read_key(SIL_BRIGHTNESS_KEY,
+			s->sleep_led_saved_brightness, 2);
+		if (ret)
+			return ret;
+	}
+
 	s->num_light_sensors = left_light_sensor + right_light_sensor;
 	s->init_complete = true;
 
-	pr_info("key=%d fan=%d temp=%d index=%d acc=%d lux=%d kbd=%d\n",
-	       s->key_count, s->fan_count, s->temp_count, s->index_count,
+	pr_info("debug=%d key=%d fan=%d temp=%d index=%d acc=%d lux=%d kbd=%d sil=%d bright=%04x\n",
+	       debug, s->key_count, s->fan_count, s->temp_count, s->index_count,
 	       s->has_accelerometer,
 	       s->num_light_sensors,
-	       s->has_key_backlight);
+	       s->has_key_backlight,
+	       s->has_sleep_led,
+               s->sleep_led_saved_brightness);
 
 	return 0;
 }
@@ -918,10 +945,57 @@ static void applesmc_brightness_set(struct led_classdev *led_cdev,
 	int ret;
 
 	backlight_state[0] = value;
-	ret = queue_work(applesmc_led_wq, &backlight_work);
+	ret = queue_work(applesmc_backlight_wq, &backlight_work);
+
+	if (debug && (!ret))
+		printk(KERN_DEBUG "applesmc: work was already on the queue.\n");
+}
+
+static void applesmc_sleep_led_setter(struct work_struct *work)
+{
+	applesmc_write_key(SIL_BRIGHTNESS_KEY, sleep_led_state + 2, 2);
+	applesmc_write_key(SIL_SET_KEY, sleep_led_state, 2);
+	if (debug)
+		printk(KERN_INFO "applesmc: SIL: set state=0x%04x, brightness=0x%04x.\n",
+			*(u16 *)(sleep_led_state), *(u16 *)(sleep_led_state + 2));
+}
+
+static DECLARE_WORK(sleep_led_work, &applesmc_sleep_led_setter);
+
+static void applesmc_sleep_led_set(struct led_classdev *led_cdev,
+						enum led_brightness value)
+{
+	int ret;
+
+	// See LmsOverrideBehavior at:
+	// https://github.com/gcsgithub/smc_util/blob/master/smc_types.h#L178
+
+	sleep_led_state[0] = (value > 0) ? 1 : 0; // LED on/off
+	sleep_led_state[1] = smooth_led ? 1 : 0; // enable slew/fade
+	sleep_led_state[2] = value; // high byte of 16-bit PWM brightness word
+	sleep_led_state[3] = 0; // low byte of 16-bit PWM brightness word
+	ret = queue_work(applesmc_sleep_led_wq, &sleep_led_work);
 
 	if (debug && (!ret))
 		printk(KERN_DEBUG "applesmc: work was already on the queue.\n");
+
+	if (debug)
+		printk(KERN_INFO "applesmc: SIL: setting state=0x%04x, brightness=0x%04x.\n",
+			*(u16 *)(sleep_led_state), *(u16 *)(sleep_led_state + 2));
+}
+
+static int applesmc_sleep_led_revert(void)
+{
+	int ret;
+	uint8_t tmp;
+
+	ret = applesmc_write_key(SIL_BRIGHTNESS_KEY,
+		smcreg.sleep_led_saved_brightness, 2);
+	if (ret)
+		return ret;
+
+	tmp = 0x1;
+	return applesmc_write_key(SIL_REVERT_KEY, &tmp, 1);
 }
 
 static ssize_t applesmc_key_count_show(struct device *dev,
@@ -957,6 +1031,26 @@ static ssize_t applesmc_key_at_index_read_show(struct device *dev,
 	return entry->len;
 }
 
+static ssize_t applesmc_key_at_index_data_store(struct device *dev,
+	struct device_attribute *attr, const char *sysfsbuf, size_t count)
+{
+	const struct applesmc_entry *entry;
+	int ret;
+
+	entry = applesmc_get_entry_by_index(key_at_index);
+	if (IS_ERR(entry))
+		return PTR_ERR(entry);
+
+	if (count > entry->len)
+		return -E2BIG;
+
+	ret = applesmc_write_entry(entry, sysfsbuf, count);
+	if (ret)
+		return ret;
+
+	return count;
+}
+
 static ssize_t applesmc_key_at_index_data_length_show(struct device *dev,
 				struct device_attribute *attr, char *sysfsbuf)
 {
@@ -1018,6 +1112,12 @@ static struct led_classdev applesmc_backlight = {
 	.brightness_set		= applesmc_brightness_set,
 };
 
+static struct led_classdev applesmc_sleep_led = {
+	.name			= "smc::sleep_led",
+	.default_trigger	= "on",
+	.brightness_set		= applesmc_sleep_led_set,
+};
+
 static struct applesmc_node_group info_group[] = {
 	{ "name", applesmc_name_show },
 	{ "key_count", applesmc_key_count_show },
@@ -1025,7 +1125,7 @@ static struct applesmc_node_group info_group[] = {
 	{ "key_at_index_name", applesmc_key_at_index_name_show },
 	{ "key_at_index_type", applesmc_key_at_index_type_show },
 	{ "key_at_index_data_length", applesmc_key_at_index_data_length_show },
-	{ "key_at_index_data", applesmc_key_at_index_read_show },
+	{ "key_at_index_data", applesmc_key_at_index_read_show, applesmc_key_at_index_data_store },
 	{ }
 };
 
@@ -1197,8 +1297,8 @@ static int applesmc_create_key_backlight(void)
 {
 	if (!smcreg.has_key_backlight)
 		return 0;
-	applesmc_led_wq = create_singlethread_workqueue("applesmc-led");
-	if (!applesmc_led_wq)
+	applesmc_backlight_wq = create_singlethread_workqueue("applesmc-backlight");
+	if (!applesmc_backlight_wq)
 		return -ENOMEM;
 	return led_classdev_register(&pdev->dev, &applesmc_backlight);
 }
@@ -1208,7 +1308,26 @@ static void applesmc_release_key_backlight(void)
 	if (!smcreg.has_key_backlight)
 		return;
 	led_classdev_unregister(&applesmc_backlight);
-	destroy_workqueue(applesmc_led_wq);
+	destroy_workqueue(applesmc_backlight_wq);
+}
+
+static int applesmc_create_sleep_led(void)
+{
+	if (!smcreg.has_sleep_led)
+		return 0;
+	applesmc_sleep_led_wq = create_singlethread_workqueue("applesmc-sleep-led");
+	if (!applesmc_sleep_led_wq)
+		return -ENOMEM;
+	return led_classdev_register(&pdev->dev, &applesmc_sleep_led);
+}
+
+static void applesmc_release_sleep_led(void)
+{
+	if (!smcreg.has_sleep_led)
+		return;
+	led_classdev_unregister(&applesmc_sleep_led);
+	applesmc_sleep_led_revert();
+	destroy_workqueue(applesmc_sleep_led_wq);
 }
 
 static int applesmc_dmi_match(const struct dmi_system_id *id)
@@ -1304,15 +1423,21 @@ static int __init applesmc_init(void)
 	if (ret)
 		goto out_light_sysfs;
 
+	ret = applesmc_create_sleep_led();
+	if (ret)
+		goto out_key_backlight;
+
 	hwmon_dev = hwmon_device_register(&pdev->dev);
 	if (IS_ERR(hwmon_dev)) {
 		ret = PTR_ERR(hwmon_dev);
-		goto out_light_ledclass;
+		goto out_sleep_led;
 	}
 
 	return 0;
 
-out_light_ledclass:
+out_sleep_led:
+	applesmc_release_sleep_led();
+out_key_backlight:
 	applesmc_release_key_backlight();
 out_light_sysfs:
 	applesmc_release_light_sensor();
@@ -1340,6 +1465,7 @@ out:
 static void __exit applesmc_exit(void)
 {
 	hwmon_device_unregister(hwmon_dev);
+	applesmc_release_sleep_led();
 	applesmc_release_key_backlight();
 	applesmc_release_light_sensor();
 	applesmc_release_accelerometer();
@@ -1356,6 +1482,6 @@ module_init(applesmc_init);
 module_exit(applesmc_exit);
 
 MODULE_AUTHOR("Nicolas Boichat");
-MODULE_DESCRIPTION("Apple SMC");
+MODULE_DESCRIPTION("Apple SMC (customised by Chris Wilson)");
 MODULE_LICENSE("GPL v2");
 MODULE_DEVICE_TABLE(dmi, applesmc_whitelist);
